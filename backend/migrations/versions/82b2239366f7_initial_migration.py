"""Initial migration

Revision ID: 82b2239366f7
Revises: 
Create Date: 2023-10-19 10:14:22.497037

"""
from alembic import op
import sqlalchemy as sa
from werkzeug.security import generate_password_hash

# revision identifiers, used by Alembic.
revision = '82b2239366f7'
down_revision = None
branch_labels = None
depends_on = None

# Generate a default hashed password
default_hashed_password = generate_password_hash('Temporary$Password123')

def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('username', sa.String(length=80), nullable=False),
        sa.Column('email', sa.String(length=120), nullable=False),
        sa.Column('password_hash', sa.String(length=128), nullable=True),  # Initially allow NULL
        sa.PrimaryKeyConstraint('id'),
        sa.UniqueConstraint('email'),
        sa.UniqueConstraint('username')
    )

    # Assuming that you're adding the password_hash to an existing table with data
    # Populate the new column with the default hashed password for existing users
    op.execute(f"UPDATE user SET password_hash = '{default_hashed_password}' WHERE password_hash IS NULL")

    # Now, alter the 'password_hash' column to not allow nulls
    op.alter_column('user', 'password_hash', existing_type=sa.String(128), nullable=False)

    # Continue with creating other tables like 'user_level'
    op.create_table('user_level',
        sa.Column('id', sa.Integer(), nullable=False),
        sa.Column('level', sa.String(length=10), nullable=False),
        sa.Column('user_id', sa.Integer(), nullable=True),
        sa.ForeignKeyConstraint(['user_id'], ['user.id'], ),
        sa.PrimaryKeyConstraint('id')
    )
    # ... rest of your upgrade function ...

def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('user_level')
    op.drop_table('user')
    # ### end Alembic commands ###
